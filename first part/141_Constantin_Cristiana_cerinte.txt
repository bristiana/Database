--141--Constantin--Cristiana

----------------------------------------EX 12-------------------------------------------


--1
--Subcereri sincronizate în care intervin cel puțin 3 tabele
-- Afișez numele artiștilor care performează la evenimentul "Untold Festival" și care au interpretat melodii de gen "EDM", împreună cu numele scenei pe care performează.


SELECT A.NUME_ARTIST ,
       S.DENUMIRE AS NUME_SCENA,
       E.DENUMIRE AS NUME_EVENIMENT
FROM
    ARTIST A
JOIN
    SCENA S ON A.ID_SCENA = S.ID_SCENA
JOIN
    EVENIMENT E ON S.ID_EVENIMENT = E.ID_EVENIMENT
WHERE
    E.DENUMIRE = 'Untold Festival'
    AND EXISTS(
        SELECT 1
        FROM MELODIE M
        JOIN TIP_MELODIE TM on M.id_tip_melodie = TM.id_tip_melodie
        WHERE M.ID_ARTIST = A.ID_ARTIST
        AND TM.DENUMIRE ='EDM'
);




--2
--Subcereri nesincronizate în clauza FROM
--Caut top 5 participanți care au cheltuit cel mai mult pe bilete, afișând numele lor și suma totală cheltuită.


SELECT
    P.NUME,
    P.PRENUME,
    CHELTUIELI.SUMA_TOTALA AS TOTAL_CHELTUIT
FROM
    PARTICIPANT P
JOIN (
    SELECT
        ID_PARTICIPANT ,
        SUM(PRET) AS SUMA_TOTALA
    FROM BILET
    GROUP BY ID_PARTICIPANT

) CHELTUIELI ON P.ID_PARTICIPANT = CHELTUIELI.id_participant
ORDER BY
    CHELTUIELI.SUMA_TOTALA DESC
FETCH FIRST 5 ROWS ONLY;

--3
--Grupări de date, funcții grup, filtrare la nivel de grupuri cu subcereri nesincronizate
--Afișez evenimentele care au mai mult de 3 artiști, împreună cu numărul total de artiști și numărul de scene, dar doar pentru evenimentele cu un buget peste media bugetelor.



SELECT
    E.DENUMIRE AS NUME_EVENIMENT,
    COUNT(DISTINCT A.ID_ARTIST) AS NUMAR_ARTISTI,
    COUNT(DISTINCT S.ID_SCENA) AS NUMAR_SCENE,
    E.BUGET
FROM EVENIMENT E
JOIN
    SCENA S ON E.id_eveniment = S.id_eveniment
JOIN
    ARTIST A ON S.id_scena = A.id_scena
GROUP BY
    E.ID_EVENIMENT,E.DENUMIRE, E.BUGET
HAVING
    COUNT(DISTINCT A.ID_ARTIST) > 3
    AND E.BUGET > (SELECT AVG(BUGET) FROM EVENIMENT)
ORDER BY
    NUMAR_ARTISTI DESC;




--4
--Ordonări și utilizarea funcțiilor NVL și DECODE
--Afișez informații despre echipamente, inclusiv starea lor și tipul, cu categorii personalizate pentru fiecare stare. Pentru echipamentele fără model specificat, afișează "Nespecificat".




SELECT E.DENUMIRE AS NUME_ECHIPAMENT,
       E.TIP,
       NVL(E.MODEL,'Nespecificat') AS MODEL,
       DECODE (E.STARE,
        'NOU', 'Stare excelentă',
        'BUNA', 'Stare bună',
        'UZATA', 'Necesită verificare',
        'DEFECT', 'Necesită reparații',
        'Necunoscut') AS STARE_DESCRIERE,
    S.DENUMIRE AS NUME_SCENA

FROM ECHIPAMENT E
JOIN
    SCENA S ON E.ID_SCENA = S.ID_SCENA
ORDER BY
    DECODE(E.STARE,'NOU', 1, 'BUNA', 2, 'UZATA', 3, 'DEFECT', 4, 5),
    E.TIP;


--5
--Utilizarea funcțiilor pe șiruri de caractere, funcții pe date, expresii CASE, și bloc de cerere
-- Afișez detalii despre evenimentele viitoare, calculând câte zile mai sunt până la începerea lor și categorizându-le în funcție de perioada rămasă.


WITH EVENTSINFO AS (
    SELECT
        E.ID_EVENIMENT,
        E.DENUMIRE,
        E.DATA_INCEPUT,
        E.DATA_SFARSIT,
        TRUNC(E.DATA_INCEPUT - SYSDATE) AS ZILE_RAMASE,
        ROUND(E.DATA_SFARSIT - E.DATA_INCEPUT) + 1 AS DURATA_EVENIMENT,
        L.DENUMIRE AS LOCATIE,
        T.DENUMIRE AS TARA
    FROM EVENIMENT E
    JOIN LOCATIE L ON E.ID_LOCATIE = L.ID_LOCATIE
    JOIN TARA T ON L.ID_TARA = T.ID_TARA
    WHERE E.DATA_INCEPUT > SYSDATE
)
SELECT
    UPPER(EI.DENUMIRE) AS NUME_EVENIMENT,
    INITCAP(EI.LOCATIE) || ', ' || EI.TARA AS LOCATIE_EVENIMENT,
    TO_CHAR(EI.DATA_INCEPUT, 'DD-MON-YYYY') AS DATA_INCEPUT,
    EI.ZILE_RAMASE AS ZILE_PANA_LA_EVENIMENT,
    EI.DURATA_EVENIMENT AS DURATA_IN_ZILE,
    CASE
        WHEN EI.ZILE_RAMASE <= 30 THEN 'FOARTE CURÂND'
        WHEN EI.ZILE_RAMASE <= 90 THEN 'ÎN CURÂND'
        WHEN EI.ZILE_RAMASE <= 180 THEN 'PESTE CÂTEVA LUNI'
        ELSE 'PLANIFICAT PENTRU VIITOR'
    END AS STATUS_EVENIMENT
FROM EVENTSINFO EI
ORDER BY EI.ZILE_RAMASE;







----------------------------------------EX 13------------------------------------------

--1
--VERIFICARE
SELECT  a.id_artist,
        a.nume_artist,
        a.tara_origine,
        a.id_scena,
        s.denumire  AS nume_scena
FROM    ARTIST a
JOIN    SCENA  s ON a.id_scena = s.id_scena
WHERE   a.tara_origine = 'Olanda';

-- update ul
UPDATE  ARTIST
SET     id_scena = (
            SELECT id_scena
            FROM   SCENA
            WHERE  denumire = 'Main Stage'
              AND  id_eveniment = (
                     SELECT id_eveniment
                     FROM   EVENIMENT
                     WHERE  denumire = 'Tomorrowland'
                   )
        )
WHERE   tara_origine = 'Olanda';






--2
--actualizare 2
-- verificare prețuri curente ale biletelor pentru Untold
SELECT  b.id_bilet,
        b.pret,
        e.denumire AS nume_eveniment
FROM    BILET b
JOIN    EVENIMENT e ON b.id_eveniment = e.id_eveniment
WHERE   e.denumire = 'Untold Festival';

-- maresc prețurile cu 10 %
UPDATE  BILET
SET     pret = pret * 1.1
WHERE   id_eveniment = (
            SELECT id_eveniment
            FROM   EVENIMENT
            WHERE  denumire = 'Untold Festival'
        );


------------------------------------------------------
--actualizarea 3
-- verific starea curenta a echipamanetelor inainte de 2020
SELECT  id_echipament,
        denumire,
        an_fabricatie,
        stare
FROM    ECHIPAMENT
WHERE   an_fabricatie < 2020;

-- actualizam starea la 'UZATA"
UPDATE  ECHIPAMENT
SET     stare = 'UZATA'
WHERE   an_fabricatie < 2020
  AND   stare <> 'DEFECT';




-------------------------------------------------------------------------------
--stergerea 4
-- participanții nascuti inainte de 1990
SELECT  *
FROM    PARTICIPANT
WHERE   data_nasterii < TO_DATE('1990-01-01', 'YYYY-MM-DD');

--  biletele acestor participanți
SELECT  b.id_bilet,
        b.pret,
        p.nume,
        p.prenume,
        p.data_nasterii
FROM    BILET b
JOIN    PARTICIPANT p ON b.id_participant = p.id_participant
WHERE   p.data_nasterii < TO_DATE('1990-01-01', 'YYYY-MM-DD');

-- sterg biletele respective
DELETE FROM BILET
WHERE id_participant IN (
        SELECT id_participant
        FROM   PARTICIPANT
        WHERE  data_nasterii < TO_DATE('1990-01-01', 'YYYY-MM-DD')
      );



--stergerea 5
--  echipamentele defecte
SELECT  *
FROM    ECHIPAMENT
WHERE   stare = 'DEFECT';

-- sterg echipamentele defecte
DELETE FROM ECHIPAMENT
WHERE   stare = 'DEFECT';



ROLLBACK;

----------------------------------------------------------------------------------------









